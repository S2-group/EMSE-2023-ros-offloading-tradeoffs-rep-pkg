---
title: "Known map experiment - RAM utilisation"
output:
  html_notebook: default
---

We are analyzing if offloading any of the three functionalities (i.e., localisation, navigation and object recognition) has a statistically significant effect on the average RAM utilisation. Fist, install and load the required libraries:
```{r}
if (!require('tidyverse')) install.packages('tidyverse', dependencies = TRUE); library('tidyverse')
if (!require('ggpubr')) install.packages('ggpubr', dependencies = TRUE); library('ggpubr')
if (!require('rstatix')) install.packages('rstatix', dependencies = TRUE); library('rstatix')
if (!require('ggplot2')) install.packages('ggplot2', dependencies = TRUE); library('ggplot2')
if (!require('lmPerm')) install.packages('lmPerm', dependencies = TRUE); library('lmPerm')
```

Next, load the experiment results from the csv file:
```{r}
data <- read.csv(file = '../../raw_data/known_map_experiment/run_table.csv')
data$avg_memory_util_kb <- data$avg_memory_util / 1000
data <- subset(data, select = c(X__run_id, amcl_offloaded, navigation_offloaded, obj_recognition_offloaded, avg_memory_util_kb))
data$amcl_offloaded <- as.factor(data$amcl_offloaded)
data$navigation_offloaded <- as.factor(data$navigation_offloaded)
data$obj_recognition_offloaded <- as.factor(data$obj_recognition_offloaded)
data$avg_memory_util_kb <- as.numeric(data$avg_memory_util_kb)
```

Mean and standard deviation of the average RAM utilisation for each treatment are displayed in the summary below:
```{r}
data %>%
  group_by(amcl_offloaded, navigation_offloaded, obj_recognition_offloaded) %>%
  get_summary_stats(avg_memory_util_kb, type = "mean_sd")
```

# Three-Way ANOVA test

Since there are three independent variables in the experiment, we opt for three-way ANOVA test. First, we need to check if all assumptions for performing the test are met. The fist assumption of having independent observations is met inherently according to the way the experiment itself is conducted. 

## No extreme outliers assumption

Next, we need to check if there are any extreme outliers:
```{r}
data %>%
  group_by(amcl_offloaded, navigation_offloaded, obj_recognition_offloaded) %>%
  identify_outliers(avg_memory_util_kb)
```

The results show that there are two outliers, in runs 54 and 3, respectfully, and both are considered as extreme outliers. We should remove the said runs from the dataset, but we can also leave them if we beleive that they will not have a significant effect on the obtained results. Let us make an alternative dataset with the extreme outlier being removed:

```{r}
data_without_outliers <- data
data_without_outliers <- data_without_outliers[!(data_without_outliers$X__run_id == 'run_54'),]
data_without_outliers <- data_without_outliers[!(data_without_outliers$X__run_id == 'run_3'),]

```
We proceed to check the next assumption - normality of the data. 

## Normality assumption by analyzing the model residuals

The first way to check normality assumption is by analyzing the model residuals:

```{r}
model  <- lm(avg_memory_util_kb ~ amcl_offloaded*navigation_offloaded*obj_recognition_offloaded, data = data)
ggqqplot(residuals(model))
```

The QQ plot in the figure above shows that most of the residuals are scattered around the reference line, especially around the edges, thus we cannot assume that the residuals are normally distributed. We will complement the QQ plot with Shapiro-Wilk test to conclude if the normality is indeed satisfied:
```{r}
shapiro_test(residuals(model)) %>%
  add_significance()
```
The p-value of $9.00 \cdot 10^{-9}$ shows that we can reject $H_0$, which states that the data is indeed normally distributed. We can conclude that the normally constraint is not satisfied. If we try with the dataset that does not contain outliers:
```{r}
model_without_outliers  <- lm(avg_memory_util_kb ~ amcl_offloaded*navigation_offloaded*obj_recognition_offloaded, data = data_without_outliers)
shapiro_test(residuals(model_without_outliers)) %>%
  add_significance()
```
normality of residuals assumption is now satisfied since p-value is higher than `0.05` reference value.

## Normality assumption by each group

The other way to check normality is by analyzing if samples for each possible treatment combination are normally distributed:
```{r}
data %>%
  group_by(amcl_offloaded, navigation_offloaded, obj_recognition_offloaded) %>%
  shapiro_test(avg_memory_util_kb) %>%
  add_significance()
```

Shapiro-Wilk test per each group yields p-value higher than `0.05` for most of the groups, except for three. If we execute the test on the dataset without extreme outliers:
```{r}
data_without_outliers %>%
  group_by(amcl_offloaded, navigation_offloaded, obj_recognition_offloaded) %>%
  shapiro_test(avg_memory_util_kb) %>%
  add_significance()
```
only one group is not normally distributed according to the Shapiro-Wilk test. The QQ-plots per group are depicted below, where most of the data points seem to be aligned with the reference line:
```{r}
ggqqplot(data, "avg_memory_util_kb", ggtheme = theme_bw()) +
  facet_grid(amcl_offloaded + navigation_offloaded ~ obj_recognition_offloaded, labeller = "label_both")
```

## Homogeneity of variance assumption

Homogeneity of variance assumption can be checked via Leveneâ€™s test:
```{r}
data %>% 
  levene_test(avg_memory_util_kb ~ amcl_offloaded*navigation_offloaded*obj_recognition_offloaded) %>%
  add_significance()
```
Since the p-value is lower than `0.05`, the result of the Levene's test is statistically significant, hence the null hypothesis stating that homogeneity of variance holds is rejected. If we compute the Levene's test on dataset without extreme outliers:
```{r}
data_without_outliers %>% 
  levene_test(avg_memory_util_kb ~ amcl_offloaded*navigation_offloaded*obj_recognition_offloaded) %>%
  add_significance()
```
we can draw the same conclusion - homogeneity of variance assumption is not satisfied. With the disputable normality constraint and no homogeneity of variance, we need to turn to non-parametric alternative of three-way ANOVA - permutation test.

# Permutation test

Execution of permutation test yields the following result:
```{r}
summary(aovp(avg_memory_util_kb ~ amcl_offloaded*navigation_offloaded*obj_recognition_offloaded, data = data, perm="Prob", maxIter=500000, nCycle=100, Ca=0.001))
```
Test results show that the main effects are significant for all three independent variables, but there is also a significant two-way interaction between localisation and navigation as well as between navigation and object recognition. If we compare these results with three-way ANOVA results, that is considered as _robust_ when sample sizes are equal for each group:
```{r}
data %>% 
  anova_test(avg_memory_util_kb ~ amcl_offloaded*navigation_offloaded*obj_recognition_offloaded)

```
we see that the conclusions and p-values are very similar to those in the permutation test. The eta-squared effect sizes are:
```{r}
res.aov <- aov(avg_memory_util_kb ~ amcl_offloaded*navigation_offloaded*obj_recognition_offloaded, data = data)
eta_squared(res.aov)
```

## Pairwise comparisons for significant amcl_offloaded:navigation_offloaded two-way interaction 

Since we have a significant two-way interaction between localisation and object recognition, we need to perform multiple pairwise comparison to determine which group means are different. We will use estimated marginal means test for this purpose with Bonferroni adjustment. We will group the results by localisation, since the main effect of localisation is greater than the one of SLAM, according to three-way ANOVA results:
```{r}
data %>% 
  group_by(amcl_offloaded) %>%
  emmeans_test(avg_memory_util_kb ~ navigation_offloaded, p.adjust.method = "bonferroni", detailed = TRUE)
```
However, the results for neither of the groups seem significant. If we try to apply the same test, but grouped by navigation instead:
```{r}
data %>% 
  group_by(navigation_offloaded) %>%
  emmeans_test(avg_memory_util_kb ~ amcl_offloaded, p.adjust.method = "bonferroni", detailed = TRUE)
```
We get the same result again, meaning that interaction between localisation and navigation is not significant for neither of the group combinations.

## Pairwise comparisons for significant navigation_offloaded:obj_recognition_offloaded two-way interaction 

Since we have a significant two-way interaction between navigation and object recognition, we need to perform multiple pairwise comparison to determine which group means are different. We will use estimated marginal means test for this purpose with Bonferroni adjustment. We will group the result by object recognition, since the main effect of object recognition is greater than the one of navigation, according to three-way ANOVA results:
```{r}
data %>% 
  group_by(obj_recognition_offloaded) %>%
  emmeans_test(avg_memory_util_kb ~ navigation_offloaded, p.adjust.method = "bonferroni", detailed = TRUE)
```
We can see that offloading navigation has a significant effect on the average RAM utilisation when object recognition is both offloaded and not.

# Results

In the box plot below, we can indeed see that when object recognition is both offloaded and not, the average RAM utilisation is lower when navigation is offloaded. However, if we compare the means of two groups on the left and right, when object recognition is not offloaded and offloaded, we can see that offloading object recognition does have an enormous overall effect on the average CPU utilisation:
```{r}
#pdf(file = "../../figures/known_map_experiment/ram-utilisation-1.pdf")

ggplot(data, aes(x = obj_recognition_offloaded, y = avg_memory_util_kb, fill = navigation_offloaded)) +
  theme_bw() + 
  geom_boxplot(width = 0.5, outlier.size = 0.5) + 
  stat_summary(fun = mean, color = 'black', geom = 'point', shape = 5) +
  labs(x = "Object recognition offloaded", y = "Average RAM utilisation (kB)") +
  guides(fill=guide_legend(title="Navigation offloaded")) +
  theme(
    axis.title.x = element_text(size = 12, family = 'sans'),
    axis.title.y = element_text(size = 12, family = 'sans'),
    axis.text.x = element_text(size = 11, family = 'sans'),
    axis.text.y = element_text(size = 11, family = 'sans')
  )

#dev.off()
```
